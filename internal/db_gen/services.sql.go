// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: services.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAppService = `-- name: CreateAppService :exec
INSERT INTO services (id, jwt_audience, name, login_redirect)
VALUES ($1, $2, $3, $4)
`

type CreateAppServiceParams struct {
	ID            pgtype.UUID `json:"id"`
	JwtAudience   string      `json:"jwt_audience"`
	Name          string      `json:"name"`
	LoginRedirect string      `json:"login_redirect"`
}

func (q *Queries) CreateAppService(ctx context.Context, arg CreateAppServiceParams) error {
	_, err := q.db.Exec(ctx, createAppService,
		arg.ID,
		arg.JwtAudience,
		arg.Name,
		arg.LoginRedirect,
	)
	return err
}

const deleteAppService = `-- name: DeleteAppService :exec
DELETE FROM services
WHERE id = $1
`

func (q *Queries) DeleteAppService(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAppService, id)
	return err
}

const getAppService = `-- name: GetAppService :one
SELECT id, jwt_audience, created_at, modified_at, name, description, contact_name, contact_email, login_redirect, access_token_duration FROM services
WHERE id = $1
`

func (q *Queries) GetAppService(ctx context.Context, id pgtype.UUID) (Service, error) {
	row := q.db.QueryRow(ctx, getAppService, id)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.JwtAudience,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Name,
		&i.Description,
		&i.ContactName,
		&i.ContactEmail,
		&i.LoginRedirect,
		&i.AccessTokenDuration,
	)
	return i, err
}

const getAppServices = `-- name: GetAppServices :many
SELECT id, jwt_audience, created_at, modified_at, name, description, contact_name, contact_email, login_redirect, access_token_duration FROM services
`

func (q *Queries) GetAppServices(ctx context.Context) ([]Service, error) {
	rows, err := q.db.Query(ctx, getAppServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.JwtAudience,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.Name,
			&i.Description,
			&i.ContactName,
			&i.ContactEmail,
			&i.LoginRedirect,
			&i.AccessTokenDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateService = `-- name: UpdateService :exec
UPDATE services
SET 
    jwt_audience = COALESCE($2, jwt_audience),
    modified_at = NOW(),
    name = COALESCE($3, name),
    description = COALESCE($4, description),
    access_token_duration = COALESCE($5, access_token_duration),
    login_redirect = COALESCE($6, login_redirect),
    contact_name = COALESCE($7, contact_name),
    contact_email = COALESCE($8, contact_email)
WHERE id = $1
`

type UpdateServiceParams struct {
	ID                  pgtype.UUID `json:"id"`
	JwtAudience         string      `json:"jwt_audience"`
	Name                string      `json:"name"`
	Description         pgtype.Text `json:"description"`
	AccessTokenDuration int32       `json:"access_token_duration"`
	LoginRedirect       string      `json:"login_redirect"`
	ContactName         string      `json:"contact_name"`
	ContactEmail        string      `json:"contact_email"`
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) error {
	_, err := q.db.Exec(ctx, updateService,
		arg.ID,
		arg.JwtAudience,
		arg.Name,
		arg.Description,
		arg.AccessTokenDuration,
		arg.LoginRedirect,
		arg.ContactName,
		arg.ContactEmail,
	)
	return err
}
