// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: m2m.sql

package db_gen

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createM2MRoleTemplate = `-- name: CreateM2MRoleTemplate :exec
INSERT INTO m2m_session_templates (id, roles, service_id)
VALUES ($1, $2, $3)
`

type CreateM2MRoleTemplateParams struct {
	ID        string      `json:"id"`
	Roles     []string    `json:"roles"`
	ServiceID pgtype.UUID `json:"service_id"`
}

func (q *Queries) CreateM2MRoleTemplate(ctx context.Context, arg CreateM2MRoleTemplateParams) error {
	_, err := q.db.Exec(ctx, createM2MRoleTemplate, arg.ID, arg.Roles, arg.ServiceID)
	return err
}

const createM2MSession = `-- name: CreateM2MSession :exec
INSERT INTO m2m_sessions (
    id,
    subject_id,
    refresh_token,
    roles,
    expires_at,
    service_id
)
SELECT 
    $1 AS id,
    $2 AS subject_id,
    $3 AS refresh_token, -- hashed
    t.roles AS roles,
    $4 AS expires_at,
    $5 as service_id
FROM m2m_session_templates t
WHERE t.id = $6
  AND t.service_id = $5
`

type CreateM2MSessionParams struct {
	ID           string             `json:"id"`
	SubjectID    string             `json:"subject_id"`
	RefreshToken string             `json:"refresh_token"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
	ServiceID    pgtype.UUID        `json:"service_id"`
	ID_2         string             `json:"id_2"`
}

func (q *Queries) CreateM2MSession(ctx context.Context, arg CreateM2MSessionParams) error {
	_, err := q.db.Exec(ctx, createM2MSession,
		arg.ID,
		arg.SubjectID,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.ServiceID,
		arg.ID_2,
	)
	return err
}

const getM2MRoleTemplates = `-- name: GetM2MRoleTemplates :many
SELECT id, roles, service_id FROM m2m_session_templates
WHERE service_id = $1
`

func (q *Queries) GetM2MRoleTemplates(ctx context.Context, serviceID pgtype.UUID) ([]M2mSessionTemplate, error) {
	rows, err := q.db.Query(ctx, getM2MRoleTemplates, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []M2mSessionTemplate{}
	for rows.Next() {
		var i M2mSessionTemplate
		if err := rows.Scan(&i.ID, &i.Roles, &i.ServiceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getM2MSessionAndService = `-- name: GetM2MSessionAndService :one
SELECT 
    m.id,
    m.subject_id,
    m.refresh_token,
    m.roles,
    m.created_at,
    m.last_authenticated_at,
    m.expires_at,
    m.service_id,
    s.name as service_name,
    s.description as service_description,
    s.jwt_audience as service_jwt_audience,
    s.modified_at as service_modified_at,
    s.created_at as service_created_at
FROM m2m_sessions m
JOIN services s ON s.id = m.service_id
WHERE m.id = $1
`

type GetM2MSessionAndServiceRow struct {
	ID                  string             `json:"id"`
	SubjectID           string             `json:"subject_id"`
	RefreshToken        string             `json:"refresh_token"`
	Roles               []string           `json:"roles"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	LastAuthenticatedAt pgtype.Timestamptz `json:"last_authenticated_at"`
	ExpiresAt           pgtype.Timestamptz `json:"expires_at"`
	ServiceID           pgtype.UUID        `json:"service_id"`
	ServiceName         string             `json:"service_name"`
	ServiceDescription  pgtype.Text        `json:"service_description"`
	ServiceJwtAudience  string             `json:"service_jwt_audience"`
	ServiceModifiedAt   time.Time          `json:"service_modified_at"`
	ServiceCreatedAt    pgtype.Timestamptz `json:"service_created_at"`
}

func (q *Queries) GetM2MSessionAndService(ctx context.Context, id string) (GetM2MSessionAndServiceRow, error) {
	row := q.db.QueryRow(ctx, getM2MSessionAndService, id)
	var i GetM2MSessionAndServiceRow
	err := row.Scan(
		&i.ID,
		&i.SubjectID,
		&i.RefreshToken,
		&i.Roles,
		&i.CreatedAt,
		&i.LastAuthenticatedAt,
		&i.ExpiresAt,
		&i.ServiceID,
		&i.ServiceName,
		&i.ServiceDescription,
		&i.ServiceJwtAudience,
		&i.ServiceModifiedAt,
		&i.ServiceCreatedAt,
	)
	return i, err
}

const rotateM2MSessionRefreshToken = `-- name: RotateM2MSessionRefreshToken :exec
UPDATE m2m_sessions
SET refresh_token = $1
WHERE id = $2
`

type RotateM2MSessionRefreshTokenParams struct {
	RefreshToken string `json:"refresh_token"`
	ID           string `json:"id"`
}

func (q *Queries) RotateM2MSessionRefreshToken(ctx context.Context, arg RotateM2MSessionRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, rotateM2MSessionRefreshToken, arg.RefreshToken, arg.ID)
	return err
}

const updateM2MSessionLastAuthenticatedAt = `-- name: UpdateM2MSessionLastAuthenticatedAt :exec
UPDATE m2m_sessions 
SET last_authenticated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateM2MSessionLastAuthenticatedAt(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, updateM2MSessionLastAuthenticatedAt, id)
	return err
}
