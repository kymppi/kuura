// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, username, encoded_verifier)
VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	ID              string `json:"id"`
	Username        string `json:"username"`
	EncodedVerifier string `json:"encoded_verifier"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.ID, arg.Username, arg.EncodedVerifier)
	return err
}

const getAndDeleteSRPServer = `-- name: GetAndDeleteSRPServer :one
DELETE FROM user_srp
WHERE uid = $1 AND expires_at > NOW()
RETURNING uid, encoded_server, expires_at
`

func (q *Queries) GetAndDeleteSRPServer(ctx context.Context, uid string) (UserSrp, error) {
	row := q.db.QueryRow(ctx, getAndDeleteSRPServer, uid)
	var i UserSrp
	err := row.Scan(&i.Uid, &i.EncodedServer, &i.ExpiresAt)
	return i, err
}

const getSRPVerifier = `-- name: GetSRPVerifier :one
SELECT encoded_verifier FROM users WHERE id = $1
`

func (q *Queries) GetSRPVerifier(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRow(ctx, getSRPVerifier, id)
	var encoded_verifier string
	err := row.Scan(&encoded_verifier)
	return encoded_verifier, err
}

const getUserIDFromUsername = `-- name: GetUserIDFromUsername :one
SELECT id FROM users
WHERE username = $1
`

func (q *Queries) GetUserIDFromUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, getUserIDFromUsername, username)
	var id string
	err := row.Scan(&id)
	return id, err
}

const saveSRPServer = `-- name: SaveSRPServer :exec
INSERT INTO user_srp (uid, encoded_server, expires_at)
VALUES ($1, $2, $3)
`

type SaveSRPServerParams struct {
	Uid           string             `json:"uid"`
	EncodedServer []byte             `json:"encoded_server"`
	ExpiresAt     pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) SaveSRPServer(ctx context.Context, arg SaveSRPServerParams) error {
	_, err := q.db.Exec(ctx, saveSRPServer, arg.Uid, arg.EncodedServer, arg.ExpiresAt)
	return err
}
